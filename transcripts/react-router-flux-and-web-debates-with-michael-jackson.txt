Transcription: welcome to software engineering daily this is the first episode in a week of shows about react and my guest is Michael Jackson he's the creator of react-router at the founder of react JS training why is react so important
 so it's it's really interesting actually how how much just how much I'm into react these days I I think it was funny about a couple years ago I used to be very very skeptical of people who would you know kind of out there framework above all the others whether it was angular or Ember I used to do a lot of mood swings back in the day and I remember the jQuery guys coming onto our forum and telling us you know how how they could do things a lot more quickly and efficiently with jQuery and and and so I just kind of had this bad taste in my mouth for all of these people who kind of made it their job to like you no talk about or build or participate in you know what a certain job because I just kind of build up the skepticism and I kind of thought you no more or less the same thing
 or less I I basically go and I I run it in in a browser and I go and I grab some Dom elements and I'm in a few late them somehow and maybe they give me some tools to sort of reason about you no data flow or you know to a data bindings or something like that but but for years and years that was kind of the the way that we the way that we that we don't things in the way that you know the way that a lot of these are structured person that you were so afraid I thought I have actually I'm ashamed to say I have I have devolved into this react lemming and I just follow follow it around where we go now the thing that really really gets me excited about react is that it actually does give me something new something that I did not have before
 which is you know this idea that I can just basically I can just sort of throw a bunch of data at it and it doesn't matter if you know I have new objects are given you a raise or whatever I can just go to throw this data at react and then react is going to admit some dumb and then react is going to manage all of the updates to the Dom for me and we could definitely get into the sort of more detail about what exactly I mean by that but but I m / j s I don't know what you want out of Ember JS the most notable differences between reacting Amber and what may be kept you from becoming the Evangelist of Ember to the degree that you become with react
 2013 maybe 2012 wasn't very long ago that I would stand up and speak about Amber and I was building an application I was building it got application and this is this was kind of the use case that convinced me that I was I was doing things wrong so you know if you're building a chat application and you get new messages from from the server right and you've got this bigger 8 of them and and now you need to figure out how to generate dumb from these messages well you know what I was using when I was using Amber I basically was observing the array they have this idea in an ember and it's really a pretty old idea that goes in a way back to sort of Mac OS 10 programming paradigms it's it's abbreviated kvor key-value-observing so basically you take a look at it
 dick like an array and then you say okay whenever this object changes whenever something about this object changes do something thing as a result and you know that they had the same idea is President's like in a framework like angular was it a day dude like dirty checking on the objects that you know your model object basically the idea is let's watch our data and whenever our data changes we will assume that the user interface is going to change and it's it's it's the same idea behind the object not observe ATI that that is making its way to Dallas right now days and so basically what I would do is I would and I would observe this list of messages whenever it changed whenever something without it then I would have to go and sort of figure out okay which index change maybe messages were coming out of order okay which ones are new okay now which Donna elements do I have and how do I get to reflect the change in that
 to the change in the dawn without you know disturbing the rest of the elements that are already in the dawn which may not have actually changed because they still have the same data and it felt like I was I was doing things the wrong way I remember the first time that I actually got a hold of react and I and I decided to approach this exact same problem and it hit me like a revelation that react didn't actually care that I was giving it a new array that would react is not trying to observe the array or the or changes to the array or changes that object all react cares about is whether or not the virtual Dom that I knit is different
 right so telephone for example you can say you can you can treat this just like at like a function imagine you're you're just unit-testing a function and your function is called you know add and it adds two numbers together well you know if you passed add 4 + 4 + the result that you get back his 8th World react only cares about the result if you were doing a unit test on one of your react components it cares about the resulting dumb well you know what if you're using a key value observing approach you would have steer foam that calling my function with five and three means that I now have different UI because instead of observing the output instead of observing like what actual changes need to happen in the in the documentarian user interface observing you know the input to my function and I assume because the inputs are different that the outputs going to be different and
 stop.. Now puts me onus on me it's my responsibility now to make sure that operations are efficient the framework is not actually helping me anymore that point but it says I love that description of the separation of concerns so I'd like to get to react to router before we get into that you built specifically I'd like to ease into our conversation with some broad discussion around routers and router is the router in a web framework could you start by defining what a route is and what a router is so in my opinion of it is around is a page on you can think of a route as basically just add a web page and you know on any given
 page you've got a bunch of a bunch of you I bunch of boxes really just sort of nested inside one another in and that's that's what a route is in and then the router it's the routers job 2
 you know given given a URL to determine which route should be displayed on the page so it's it's you know it's it's this idea of routers is existed for a long long time on the server you know whenever you go into your your engine X configure your Apache config reason you know your rails controllers and you know kind of the modern to the PHP Frameworks and they have these server-side routers that determine okay when an HTTP request comes in how do we run to the page where the routers that we develop they work in such a way that the back and forward work reliably navigating in gmail on your clicking on email
 what caused this this point in time we're back and forward did not work reliably client-side Technologies building more more jobs for heavy apps on the front end and what would happen is you know somebody would quit can a certain place and cause the UI to change and then they would not propagate that change in a meaningful way back to the URL so the page looked different as a result of them clicking somewhere or doing something but do u r l didn't actually change the reflector the page of change so so then you know if you click the the back button and you have an actually inserted a new entry into the browser history you would assume it would go back to the previous you are that you were looking at but as far as the browser is cancer
 you know before you made that change whatever before but as far as the browsers concern the last page that it knows about might have been the last fight that you visited so instead of just going back to the last you are that you were looking at on the site that you're currently on you might actually be taken completely out of that site to it to another side entirely and and you don't want to really modern web apps still still do not have good support for URLs in the browser you know that you know I'm so it's still something that we're learning how to do important to think of URLs as part of your design process you really really have a really powerful tool when you have your own soon
 instead of just describing to you sort of in words over pictures you know what a page looks like what it what route we're at I now actually have a string of data serializable string of data that I can give you and I can say look what route are we at here they're here they're out there where at and if if I have good URLs you know how search engines or are more friendly to my contents I can copy and paste them I can I can put them in an email I can put them in an ion message to somebody and so you know you actually gain a really really powerful tool now it today well actually you know we've talked so far are about just implementing this in browser is right but then a tool like react-native comes along right and gives us the ability to now we're wondering you know native UI with JavaScript in and we're actually thinking you know maybe we can
 reuse this concept in in Native application so this will resonate with anybody who's ever who never develop the sort of native app so you gotta you know an iPhone app for an Android app and you've tried to sort of record the state that the user was at when you know they close the app or or they they otherwise you know maybe they do the apple is the app went to sleep for some reason an end and it shut down do you have some sort of your own mechanism for serving coding all of that stay well the world already gave us a really really good one which is and you are out so we're actually are we supporting the idea of the URL to Native itself is not react native just gives us react but with Native
 spoke with the router with the react router running on a react native app when you can't do that because we just use that same primitive which is a URL and now are you around can describe a web page in a web app or it can describe you know a set of nested views in an eighth of that just the same way
 so that's fascinating let's Zoom back and talk about what is the react router so will Browder is you know I mention that we talked about Ember never really had it this this great concept of of a router and by the way I'm not the only person who's working lots and lots of people the main other author of it in fact the original author of his name is Ryan Florence he has at least 10 commits in there I think before I started doing extra credit but anyway he and I both coming from and we we we really really messed the Ember router the fact was that eat when you are building an ember after it was very very easy to go ahead and take a look at the URL and then you could know immediately which controllers were actually active given that URL it made a lot of things really nice to know for example your debugging you see a bug on the page well what's the euro
 oh you are Elizabeth's well now I know exactly where to go to look and and you know to try and find the blood and see what's going on I thought you were on that on that page answer when we came to react we we really loved this model that react gave us for describing the view layer but we didn't have a router and so what we wanted to do was we wanted to go full page apps and react and not just you know when it's reviews here and there so we wanted to have you know the back and forward buttons work we wanted to be able to describe an entire components hierarchy you know how good you are else for it so that's kind of where the project originated I think we made the first commits back in May of last year and right now actually just last weekend we released the very first release candidate ever won. Arrow release they weren't we're making a push for right now and will probably be finalized
 in the coming weeks set alarm without it I mean what it what to build an actual application using react what did you need before you had the router and how does the router change things so we actually have a really interesting guy said there's there's some some some dogs that that Ryan actually wrote for the router there's this there's a swan doc called me the introduction I'll put a link to it in the in the show notes but basically the idea in that document is let's build an app without react router and then let's build an app with it and see what we get and you you know before you're if you're not using react-router you basically end up building your own sort of Homebrew
 router do you have some sort of making something for you no figuring out what's getting ready to do the page you have you know some other sort of mechanism for no navigating around react-router really just sort of encapsulates all of this and it in a clean way and give you hooks at the you know the times that you need so you have hooks for example when you enter a router when you leave about you also can transparently have support for multiple different URL schemes so you know modern browsers support HTML5 history which is great but i e 9 unless I don't actually so you know for a long time website authors were sort of taking this functionality using the cash portion of the URL and with water it's really just a configuration option you just say okay I'm using hash you are else okay we don't need to support ie9 less anymore now we're using real HTML5 you or else I'm so you know
 just a little bit sick this is for building user interfaces don't get confused stop contributing to a visual component it's not to me I think of it as another user is seeing this router if you look at the code it looks like a component so is is the react-router an example of a movement towards a entire style of program is a component oriented programming where we're just building some of them happened to Bui Elementary no no no you actually catching on to it really well
 so yeah you're right that there is not a sort of a component in the page that you can look too or rather a rendered piece of the user interface I did that you can look through and say that is the router Dev right you know it but it beat the idea is that is participating in the user interface but it's not really rendering anything in in and of itself it's just rendering the components that you give it you know what it what is kind of another really interesting movement here and we talked about this component a lot in our Advanced Training you might be familiar with one of the other popular react libraries it's come out recently is just called react emotion and there's this spring component to the reactor motion library and again it it's not really something that you actually render to the page that you actually say you know here is addictive that the spring component rendered rather than the
 be at the behavior of the spring component to perform some animation and then it gives you back you know an animated value that you can insert into you know you're in line styles of your element or whatever so that you can you know give it to be a sort of effective animating back and forth but now the power in the real power and doing anything this way is that now we were making the move from building our user interfaces imperative Lee to building them declare furtively and that's a really really significant shift I think I don't have to sort of go in and hunt down you know it's especially helpful for debugging for example if I'm being imperative code I have to figure out where the method was called imperative Lee but if I if I learn how to model things should have been in the declarative way
 I am now calling into those components for example when you're when you're building a react-router application of the main piece of state that we pass around is called the location right it's it's analogous to like window. Location so your centrally give a router a location hey router here is where we are here's what the Euro looks like and here's you know how we got here and then the router. You know reacts to the fact that the location has now changed but I never actually tell the router to a router change the location right the router is I mean that react really is is an app named the router is just reacting to the fact that the location has changed somewhere else and it actually makes and models things so much more thing that describes
 router component just described what the page looks like given a location
 right so react has a design pattern or on architecture associated with it called flocks can you define the flux architecture and cow the react router fit into the flex architecture architecture is it's not actually part I mean you can totally use react without flux it's just an architecture that that helps you to kind of think about how data flow is around in your application so if you go back in to watch the original can of I think was the FFA conference where Jing Chen and Pete Hines were talking about you know they were clear kind of introducing this idea Flex they were basically talking about how to weigh binding made it difficult for them to reason about how. It was flowing in their application so somebody would you know click a button way over here and then it would cause a change way over there and it was very difficult to sort of track how this change you know propagate
 throughout the application for how how one color change in one spot if I could change in in another spot of the application and so the idea was you know the idea was flux was will give you a dispatcher object and that's the books library is actually got a few different objects in it but nowadays but originally when they when they released it that was the only thing that they actually gave you was you know you would you would npm-install flux and you would have a dispatcher and the dispatcher was basically away the dispatchers is kind of like your traffic cop standing in the in the middle of the intersection and you know it has different cars want to go through he's you know saying which ones can and when and insert of controlling the flow of the traffic so you know the dispatcher would only allow one action to go through and change the state of your application at a time so one thing that it would prevent you from doing for example is you know having cascading updates you can only you know make the make one change
 the state of your application at a time so it's you know how that relates to the router is there they're kind of related but they're also kind of separate in so much as you can use flex to sort of organized the way that data flows into your react application and lots of times you you know you need data at a specific route it's an area of active research and development we're still not entirely there we do have some good we do have really really good support actually for flux architectures in the one. Over they said I mentioned earlier that we're working on right now but for Associated I think you mentioned this in one of your router talks unless I'm mistaken and I think somewhere in conversation
 what is react epitomize functional reactive programming your SP expert I am actually I'm kind of like a kid walking wide-eyed through the through the FP you know Candy store right now so me to Salt Lake I'm totally in the like absolutely naive but will let you know instead of modeling changes to State using objects which kind of hide the state you know kind of tucked away is instance properties and things like that now instead of modeling applications like that now we just model model changes to State as functions on that state I'm so one one Library that's actually been really helpful for me and and digging further into functional programming
 programming language and it's one of the libraries that we actually maintain as part of the rack GitHub or organization that that the router is also a part of I'm in a redox basically take State and then it models all changes to that state as just a reducer so you know what reducer over what well the memo argument is basically you know the last state that I had and then the you know the argument to my reducer is a change to that state I'm in so if I can model all changes to the state of my application is using this this reducer well now I owe the state only ever lived in one place and it becomes a little bit easier for me to you know sort of not keep the state in a spring gold around in my entire components hierarchy answer to keep it in one place but I think that Holly and in general just the changes that I've seen in just sort of you know Shifting the way that I feel
 think about structuring things from itta let's use fewer objects here and let's use but use more just sort of functions over Primitives let's complex objects rather more more primitive objects and more just sort of functional Transformations overdose objects it really has opened up just a lot a lot of just possibilities if you if you want an example one really really concrete example and you can crack open the code and you can look at it is in react-router 0.13 we had this massive sort of subclass you know this class hierarchy you know you ain't doing things that sort of traditional LOL away with inheritance and super Etc and we had this this big class hierarchy for these history objects I told you earlier that we support you know both House history and HTML5 history and and we even want a sport like native history and memory history Smiley problem
 thanks subclasses that's the way right because these are all different types of the same sort of Base Class so I'm a base classical history and then we'll have a subclass for John history you know history that are supposed to run in browsers now I have another subclass for you know history that are supposed to run on Native devices and then delete a bear subclasses and businesses basically how we had model the problem I'm in for me
 you know call me naive or maybe I maybe I went to the wrong computer science program or something but it ended up being a total total mess we had Soopers all over the place we had like you know pseudo private methods using these sort of hero underscore you know contracts were you know it's not really private but hey you know you really shouldn't be calling that and I just got sick of it I just absolutely got sick of it and a lot of people who were who were helping us with the router or like I mean everybody would look at that section of the code and just be like places like there's gotta be a better way and so one day I just I said I should I sat down and I and I said okay what would this look like if we had no classes because essentially what what this is this is this yeah we can model this with just functions we've got a location which is you know why you are all this is where we are and now it's changed because the back button was there too
 cordless hair look was like whatever but it's now changed and so we now need to go through this functional transformation and get the next location you know whether we got to redirect in there whatever it is should be a pretty easy problem to model using that and answer me I wrote this history Library which you can you can just npm-install history and you'll get it a friend of mine that I was with kind of nice actually give us there then can pack his name but very clearly they do the exact same thing in one we went from this class based Oro sort of approach and then the other one we went when this purely functional approach in the functional approach is strictly more powerful and it's cleaner added leaner it has helped us to find you know a lot of different kinds of of bugs I don't I don't I'm not exposing any methods
 LOL you know you stingless underscore sort of construct you know that that I don't actually want to be exposed but basuto private methods it's it's strictly more powerful than then you know the class based approach West Preston and again this has nothing to do with react but I think that react as you know a functional for bringing this functional Paradigm to building you I I think his name is definitely encouraged you know things like the Redux librarything like the history library and lots of others but I feel like everybody I talk to who is experienced programmer who has some idea what a functional language is or has experience with functional they take every opportunity to use functional languages so I don't know if it's like a hard-and-fast rule that you should have to use function languages if you can but it's like seems like it's very
 it helps you reason about stuff whether that's concurrency or or atomicity the future of react and the effect that react is having on the rest of the world react JS training partner Ryan friend Florence he said angular and react and Amber are soon going to look very similar and there are they're all going to be leveraging one way data flow and they're all going to be focused on component is RDS Frameworks going to be different I think
 yeah so Ryan Ryan was right by that they're going to be similar in a lot of ways one of the main things that I that I see they're one of the main difference is that I see is you know I see I see people in you know Angela number camps they're talking about like us to server rendering like a few years back and that was a huge reason why we stopped building so much is Javascript you know heavy apps on the front end because we wanted to render stuff on the server because it would be you know then we can serve instead of web pages to people after they write well you go to react like they've been doing it all ready for a very long time and and everything you know this project right project was a huge eye-opener for
 at least because hear your clipboard they wanted to do some pretty some pretty interesting animation work on the mobile web right when you say animation and mobile web usually you think forget it right like us it's just going to suck right foot board is like well maybe we can you know maybe we can build an entirely different rendering engine for react that instead of renderings of dominance now rendering to Canvas because Candice is actually really fast on mobile I'm in a few Brown flipboard.com now on your on your iPhone 4S or 5S or whatever you know not have nots not the Super newest phone actually feels really really good you get these really good animations why am I talking about this because I think that really hit the nail on the head with the ladder of abstraction right we talked a lot about abstraction and programming and we talked about Deacon abstractions and how we
 build one you know what you have to be careful because if if if you're not if you're not careful it's going to leak and it's going to be it's it's going to be very very difficult to do all of the things that you were able to do with these sort of lower-level white people react if they really hit the nail on the head with the right level of abstraction but the fact that a third-party completely unaffiliated with Facebook can go and create their entire rendering engine you know unbeknownst to Facebook for rendering the canvas on mobile to me I think is Testament of that fact it's like larger ecosystem of different JavaScript Frameworks I see all these other framers like kind of fast following react well and you talked about this a lot about the Greenfield First Brownfield stuff like if you're building a Greenfield app you should probably use react if you can and if you can't then it's like you can keep using your
 you know you should keep using angular keep using Amber or whatever but the fact that those things are building out feature sets that look like react is probably a sign for my first principles Sandpoint that's just like so so appealing that it's worth just having so there is an open source project and it's very decisively led by Facebook but you do not work at Facebook you have an inside or outside or person because you work so heavily on my Facebook and I know you've heard some of the Facebook team but I'm very curious about about this experience of kind of being inside or outside UR
 yeah it's interesting Facebook is actually hired quite a few of my friends who you know who is Ruby work this stuff and you know it we we we go talk to them about the stuff I think you know it it's it's it's just a matter of just kind of what you want to be doing with your with your career decision that Ryan and I have made is that at least for now we think that it's just just kind of a little more interesting to us to be doing what we're doing right now but it is Doug give us a unique kind of perspective right because we got to we get to work on you know how we get to work on the router we get to do the training and stuff and I feel like we do you get to bring a little bit more of sort of the community he aspect back to the core react contributors I mean not to say that they are not in touch
 they're incredibly inside some responsive and and very active you know when in public forms like Twitter and Facebook obviously and and responding to you don't get how to respond him to users concerns but I think that we can sort of make a good testing bed for for some of the concepts after example there's this there's this thing
 better this feature actually every act that you know is not actually very well-documented and it's not you know very well just talked about I was not documented at all actually in the official react station but it's something that you know browsing around the react Source I noticed one day and I was like yeah maybe we can use this in the router and the future is called context basically the feature what it is is it's you know the ability to Define sort of a variable at a higher at a high level in your component and then it sort of automatically Cascades down as props to you know deeply next two components you don't have to pass in explicitly the props at every level you know and every single render method and I thought he'd maybe this could be useful in the router right because we have any links that need to be able to trigger navigation from arbitrarily you know deeply nested portions of your hierarchy of you hierarchy so one of these links just sort of have this router thing passed down automatically
 they knew about in contact until we started using it and you know as we were using it it was great for the use cases that we were having but then we got a whole bunch of feedback on the router project from people who were like hey you're using this contest thing and it doesn't actually work the way that we intended and what about should component update and it was kind of a long story but you can be the idea was you know when that feedback surgical back to the Riviera tax project and we weren't the only ones I'm sure that we're getting on the speed bag others as well but yeah they decided to actually make a change and 0.0. 14 release of react to make contact just in front of change the way that it works so now instead of being an owner Beast which is you know their component that render you it was now parent based so in other words you know the component that is your parents in the in the dumb hierarchy contacts
 tell me Pastor passed down by a parents instead of owners at the edges of react and others have helped to provide some sort of real-world feedback to to the Facebook team where they're like hey and communities kind of having problems with using this feature this way maybe it should instead work like this relationship Facebook is
 Facebook but without a mind is react.js train what are you guys doing Ryan and I were at January we were at Facebook the first conference that they did and they invited us to speed and we are very gracious and when we showed up we spoke and then people your various people kind of who are attending the conference would have asked and I said you know the dinner or whatever say Hey you know we're doing any training or Consulting because you know we've got a team over here you know maybe we're at Netflix or Yahoo or somewhere in this kind of team we want to come get the rest of our team up to speed on this stuff and you guys seem to know what you're doing so we were both full time elsewhere at that time and then but you know enough people started saying things and we got some encouragement from some friends who said hey you know there's
 who produced when you guys should actually do this at the same time you know the router was really taking off the router is is form the backbone for a lot of people applications in the community and when you are kind of drowning in you know support request and issues and Torah class and things and so we kind of saw this opportunity so maybe we can train people on react at you know and maybe we could make enough doing that full-time that we could should have donated the in between times when we're not on site doing some training to maintaining are open source work if you if you talk to anybody and I am sure of course you have Jeff but you don't you talk to people who have made me who maintain large open source projects if it gets to a point where you can't really just do it in your spare time if you wanted if you want to do a great job you know you have to spend a significant amount
 time and effort and money on maintaining the software for the for the good of the and so so you know we ended up not point to that point for us at least that we thought you know it we really believe in the router we believe we do it you were doing some things there that that people haven't done ever before in clients and routers we really want to give this thing a chance to sort of grow and and succeed we really believe in the react technology we believe in the team at Facebook it's building react in India no. Just the fact that they open source it and shared it with the world I think is is is phenomenal so maybe we when you get up there on the podium in it or I don't know how you do it in front of a bunch of people who have varying levels of experience what is your what is your training process
 Joe ends actually I don't know if you don't neither one of the organizers of mg called she actually wrote A Blog article last week kind of talking about the way that we do our kind of talking in detail about the way to Medina so put that link in the show notes as well but the idea was up and we kind of switch off what will do like a lecture for maybe 45 minutes to an hour and then we actually have code actual code that you downloaded machine you install it and you run it and now you've got you know exercises in the browser so some of the exercises we do or like cone style programming right where you've got just 10 failing unit test and now you know you have to go through one but after one and make them pass and we cover all sorts of
 Topix we cover yeah we talked about flux we talked about data flow we talk about animation we talk about you know principles of the shift from imperative declarative programming we talk about you know when to use props vs. State we talk about you know rendering optimizations and performance and things like that we talked about testing we talked about in a project structure good component your building reusable components we talked about a lot a lot of different things actually developed enough material now that we offer to courses so we've got a fundamentals course which is kind of like the Terror at you know how and why of react and then the advanced course which is just kind of like you know some Advanced topics that we we fuss or discovered you know just in our experience with reaktor actually doing one if I can make this short little shout-out we're doing one course next week on Monday and Tuesday in New York City of Tumblr we're doing our Advanced course when we saw some tickets available
 that's so we can put a link to be awesome I'd appreciate that maybe you have some commentary on this like I've been researching this topic my brother told me about this debate between components and mix-ins and I didn't completely understand what he was talking about but could you describe that debate well so I think the root of the debate between you know how other components and make sense this is basically this idea that you don't really act 0.13 and in previous versions have this method called create class in create class basically creates a class that you can now use to to you know 222 lender component to the page
 and they have you know they have they have this this idea in in the create class API that you can use these things called mix-ins and Fixins you basically just plain objects that you can use to sort of override Behavior well when you know when yes sick so I guess it's es2015 now started gaining popularity in particular the Bible project I think really brought it to lied and made it usable for most of us in the in the street actually you know actually used in our production when that started really getting popularity you know the Creator the react looked around and said what why do we have our own
 yeah our own object model that's not really what we set out to create you know that this thing that we really want to focus on is is the view layer and helping people to do the view layer really really well so
 so that's how about let's let's experiment just using es6 classes because he has 6 specification actually has no classes it's it's a little bit it's a little bit I guess I don't you just don't have all of the features when you're six classes that you had in create class I'm in one of those features is mixing right there is no special occasion for mix-ins and he has six classes so what's up when you start looking around and you okay so how am I going to use my old my old create class code that that use mixon's how do I get that same behavior if I want to try and use these yes six classes
 I think that I think that the Essex classes are are great move because they you know it's actually easier just to have misbehaving it's easy to have mixed in that that are not very explicit about what they do so I could I can basically just grab a bag of methods somewhere else and I can mix it into my components and now all the sudden my component is behaving weirdly you know it's kind of like kind of like if you've ever done you know Ruby code or something in you you were you just require a file somewhere and now I'm resting your beer colored behave slightly differently it's it's a very sort of indirect way of programming whereas react Savers this very explicit model of you know I can take a look at my component class tonight and I know exactly what it what it what it's doing so so
 but there are a few good use cases for them then you can also do really bad things with him and so this movement towards using your six classes I think is a positive thing overall I think in general though we just sort of have to figure out how to use high or the components to do all of the things that we used to do with make sense I'm the nice thing about higher or components is the function you know I wrote a function this is basically just a function that calls another function until if I'm using a higher-order components and basically give it prop and then it passes you know
 it may or may not have two stops down to down to his child components but it's the same ideas have a higher order functions what's going on now instead of you rendering you know what table view or something that might mix in some mixing which if I'm saying render a table view I have no idea what it's mixing in now I render the high order component and I possibly created or somebody else and I say it's going to render a table do you and so now I have I have a much clearer picture it's much more direct for me as a programmer to see here is what the components hierarchy looks like and and so I can you know so don't bug the other come across is the debate about web components being potentially conflicting with react
 can you define mutually exclusive one of my buttons actually what I'm going to try and get some talks about that lots of people getting out to solve
 the problem of the problem the problem of scope I think is what they said out to Salt right so so the fact that you know I got you know this these These are you know CSS rules that are just sort of you know living in the entire document or this JavaScript code that you know is you know these JavaScript variables that are supposed to be entire documents like there should be a way to scope that better right so if I had if I had a web component which requires browser support by the way if I had a web component I could
 limit the scope css-selectors or I could limit the scope you know in which that JavaScript actually runs in certain limit the scope of of HTML like I guess
 but I think in large part it is it's been a failure it is going to be there for a couple reasons one is it it's going to require all of the browsers to need to get on board it's and it's initiative that's been largely Push by Google hasn't really been picked up very well by the other browser vendors and so you know Chromecast support for it but you know for the shadow Dom and hardly anybody else does but I think that's a larger issue is that it's it's it's it's not a good model for encapsulation which is slightly different than then scope you'll notice that you know if you look at the web components specification there there are a few things like you know that the shadow piercing selector in CSS right so essentially what you know what we said when we set out to create web components was it we were going to have a limited scope and now
 you have to introduce a selector into CSS that is able to completely violate that constrain whenever we think it's more convenient to to to not have scope right
 I'm sorry what what likes backward compatibility yeah like the polymer project for example if I need to if I need to be able to use Shadow Dom I need a browser that supports shattered on war between Google and Facebook or is that Miss reading the situation
 tonight I think that the mystery guy I think for the most part but the the react approach is is very pragmatic right I mean that the react approach is enemies people are using react to build facebook.com right react facebook.com is completely written in react right to react was built by people who were shipping software using react being web components initiative I think it's largely back by people who are sort of tinkering and experimenting and stents or you're not well you know could this work could this song some problem that somebody might have said they're not writing Gmail using web components you know they're not writing Google Maps using web components it's just sort of it's sort of like this thing that came out of the labs at Google that you know any sort of you know babe them into some standards committees with which they have lots of
 but it was your choice you know xmlhttprequest where did that come from all that came from Microsoft to needed to be able to make a request you know HTTP request to their server using JavaScript write so they just put it in there they dog food it they used it and then everybody else to hang you know that's a really great idea I would like to do that and let you know make a hundred on it so he's got an interview numerous numerous numerous other examples of you know browser vendors implementing something
 it works it turns out to be a great idea and so we can now all go to say yes that we'd all agreed that this is a good idea let's all use this exactly exactly we don't need to invent things to solve problems that unit that might exist they're much more diplomatic than I basically the way that I see the discussions going in public is the web component people will come around and say hey I can use react with my web components work together and the react people are like
 yeah I like like not to react on Facebook community in general is just kind of like yeah that's that's great but why would I ever need to do that like it's just sort of a I feel like there's a desire from the web component Camp to have you know react people using web components because I think that will validate that they're doing but again the people are using react weird word pragmatic for shipping software like we're not you know I'm just for the sake of using it I'm going to use it if it if it gives me and it solves a real problem that I have if it gives me some real level of benefit why would people actually adopt web components in popularity if it's not actually shipping software or
 I don't know
 what I think I think I think the web component people are going to keep doing what they're doing they react people are going to keep doing what they're doing the only chance for web components to succeed is going to be if you know Mozilla and apple and everybody else who is shipping at a major browser says yes we are now going to support the shadow Dom in these things that that you guys need in order to get to work
 are there not going to be able to convince them to do that and everybody's you know 5 or 6 years from now somebody at Google is going to pull the plug on web components and take it out of chrome and I are you I don't see I don't see you know another way for that was in the meantime people are going to be shipping react apps and they're going to be shipping them up I don't know about using cannabis and on the servers and it was just you know why would I use something that might have might have full industry support in 5 years or I could just use something that works today got it so I want to get the clothes off you been very gracious with your time at the Facebook team talking about the future of react and we've seen so many incredible Technologies continue to come out of Facebook and the open source Community associated with Facebook on Android native yesterday we knew that was coming
 still really amazing and all these other things really like to see in the future especially because you're helping to build that future
 I really think that we major initiatives the major sort of thing that's coming down the pipe in the future is is Retin-A obviously it's not coming down the pipe is here but it needs to mature I think when when companies start realizing that that react doesn't just it doesn't just change their software it changes the way that their companies work together it changed the way that people in their company get stuff done every tech company that I know of now every single one of them except for maybe Facebook but maybe even them to some extent is this three-legged stool right you've got the web sort of generalist then you've got the iOS team and then you got the Android team and you know they're there
 a lot of overlap in in the types of responsibilities that they have they want to have feature parody though so you know like I was at Twitter for a long time I said you know in the end you know we would ship something on the web and now we got to ship it on on iOS and now I've got to ship it on your Android app is well and so you've got this pain where you know some some platforms are lagging behind others and you have to you know synchronize between these different teams if these different teams have a language to talk about the work that they're doing you know what if an iOS Developer and a web developer in an Android developer can actually all go out to lunch together which by the way doesn't actually happen at these companies and I'm talking about because they all work on separate teams I load sort of away from one another but what they did and they actually had a Common Language when they went out to lunch to talk about features that they were building you know a common common component model where they can talk about it you know the implementation
 at the low-level it is different right be the the Android Daddy's you know writing to you using when you sort of Android SDK you know using you like it and the web dev is using you know browsers but they have a sort of this higher level where they can talk about how to build components and how to build out features now instead of of having you know three entirely separate teams in our organization now we can start building teams around features you know product teams which I think is a much more interesting and much more productive way to structure a large organization you know it and you see that you got you know a company like Yahoo we were just there a couple weeks ago you got the search team you got the fantasy sports teams are you know you got the Tumblr team right that organize these these team does not my skill-set but it's by my features
 and then the particular skill set that a developer has on the team it's like it's just like aspect it's like a specialty like oh yeah she's you know you know or are we made of developer and she ships to iOS and he's our react developer and he happens to you know maintain leave me Android app but we're not you know vastly different animals anymore we all kind of have this common language to talk about the things I think that's that's in Emma soon as larger companies really catch on to that Vision they're going to realize that it's same so much just in time which translates dollars are which means that they're going to be able to ship things you know just so much more quickly it's alright I think that's where the really really excited word exciting work is going on in react as I in react native Department
 awesome Michael Jackson thanks for coming out of software engineering daily it's been fantastic talking to you thanks Jeff I really appreciate it
